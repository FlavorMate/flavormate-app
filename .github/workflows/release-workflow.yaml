name: FlavorMate app build workflow
on:
  push:
    branches:
      - enhancement/ios-signing

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/flavormate-webapp

jobs:
  project-build:
    runs-on: macos-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate sources
        run: dart run build_runner build -d

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # Install certificates and provisioning profiles
      - name: Install Certificates
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision

      - name: Install Keychain
        run: |
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security set-keychain-settings build.keychain
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Build ipa
      - name: Build ipa
        run: flutter build ipa --release --dart-define=build.stage=release --no-codesign

      # Export IPA using xcodebuild and ExportOptions.plist
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
          -archivePath build/ios/archive/Runner.xcarchive \
          -exportOptionsPlist build_assets/ios/ExportOptions.plist \
          -exportPath build/ios/ipa

      - name: Compress ipa
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      # Setting up android signing
      - name: Decode Android Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # Build apk
      - name: Build apk
        run: flutter build apk --release --dart-define=build.stage=release

      # Build app bundle
      - name: Build app bundle
        run: flutter build appbundle --release --dart-define=build.stage=release

      # Build web
      - name: Build web
        run: flutter build web --wasm --release --dart-define=build.stage=release

      - name: Prepare web archive
        run: |
          cd build/web
          # modifying service worker to exclude the backend url file from getting cached
          sed -i '' '/"assets\/assets\/web\/backend_url.txt"/d' flutter_service_worker.js
          
          # downloading required files for drift to work on web
          # download sqlite
          curl -L -O https://github.com/simolus3/sqlite3.dart/releases/download/sqlite3-2.4.6/sqlite3.wasm
          
          # download drift
          curl -L -O https://github.com/simolus3/drift/releases/download/drift-2.20.1/drift_worker.js

      - name: Compress web archive
        run: |
          cd build
          tar -czf web_build.tar.gz web

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/web_build.tar.gz
            build/ios_build.tar.gz

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios_build.tar.gz,build/web_build.tar.gz"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          removeArtifacts: true
          replacesArtifacts: true

      # Cleanup step to always run, even if the build or upload fails
      - name: Delete Keychain and Provisioning Profile
        if: always()  # Ensure this runs regardless of job success or failure
        run: |
          security delete-keychain build.keychain
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          rm -f certificate.p12

      - name: Delete Android keys
        if: always()  # Ensure this runs regardless of job success or failure
        run: |
          rm -f android/app/keystore.jks
          rm -f android/key.properties

  docker-build:
    needs:
      - project-build

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Download web archive
        uses: actions/download-artifact@v4
        with:
          name: Releases
          path: build

      - name: Extract web archive
        run: |
          cd build
          tar -xzf web_build.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build_assets/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Remove untagged images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          delete-untagged: true
          token: ${{ secrets.GITHUB_TOKEN }}
          package: flavormate-webapp
