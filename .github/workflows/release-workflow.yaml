name: FlavorMate app build workflow
on:
  push:
    tags: [ v* ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/flavormate-webapp

jobs:
  build-ios-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate sources
        run: dart run build_runner build -d

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # Install certificates and provisioning profiles
      - name: Install Certificates
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE_IOS }}" | base64 --decode > certificate_ios.p12
          echo "${{ secrets.APPLE_CERTIFICATE_MACOS_APPLICATION }}" | base64 --decode > certificate_macos_app.p12
          echo "${{ secrets.APPLE_CERTIFICATE_MACOS_INSTALLATION }}" | base64 --decode > certificate_macos_install.p12
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision

      - name: Install Keychain
        run: |
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security import certificate_ios.p12 -k $KEYCHAIN_PATH -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild
          security import certificate_macos_app.p12 -k $KEYCHAIN_PATH -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild
          security import certificate_macos_install.p12 -k $KEYCHAIN_PATH -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productbuild
          security list-keychains -s $KEYCHAIN_PATH
          
          security set-key-partition-list -S apple-tool:,apple:,codesign:,productbuild: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # Build ipa
      - name: Build ipa
        run: flutter build ipa --release --dart-define=build.stage=release --export-options-plist=build_assets/ios/ExportOptions.plist

      # Build macOS
      - name: Build macOS
        run: flutter build macos --release --dart-define=build.stage=release

      - name: Package and sign macos
        run: |
          cd build/macos/Build/Products/Release
          codesign --deep --force -s "Developer ID Application: ${{ secrets.APPLE_MACOS_TEAM }}" --options runtime flavormate.app
          productbuild --sign "Developer ID Installer: ${{ secrets.APPLE_MACOS_TEAM }}" --component "flavormate.app" /Applications "FlavorMate.pkg"
          xcrun notarytool submit "FlavorMate.pkg" --apple-id ${{ secrets.APPLE_ID }} --team-id ${{ secrets.APPLE_TEAM }} --password ${{ secrets.APPLE_ID_PASSWORD }} --wait
          xcrun stapler staple FlavorMate.pkg

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-macos
          path: |
            build/ios/ipa/Runner.ipa
            build/macos/Build/Products/Release/FlavorMate.pkg

      # Cleanup step to always run, even if the build or upload fails
      - name: Delete Keychain and Provisioning Profile
        if: always()  # Ensure this runs regardless of job success or failure
        run: |
          security delete-keychain "$RUNNER_TEMP/build.keychain"
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          rm -f certificate_ios.p12
          rm -f certificate_macos_app.p12
          rm -f certificate_macos_install.p12

  build-android-web:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.1'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate sources
        run: dart run build_runner build -d

      # Setting up android signing
      - name: Decode Android Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # Build apk
      - name: Build apk
        run: flutter build apk --release --dart-define=build.stage=release

      # Build app bundle
      - name: Build app bundle
        run: flutter build appbundle --release --dart-define=build.stage=release

      # Build web
      - name: Build web
        run: flutter build web --wasm --release --dart-define=build.stage=release

      - name: Prepare web archive
        run: |
          cd build/web
          # modifying service worker to exclude the backend url file from getting cached
          sed -i '/"assets\/assets\/web\/backend_url.txt"/d' flutter_service_worker.js
          
          # downloading required files for drift to work on web
          # download sqlite
          curl -L -O https://github.com/simolus3/sqlite3.dart/releases/download/sqlite3-2.5.0/sqlite3.wasm
          
          # download drift
          curl -L -O https://github.com/simolus3/drift/releases/download/drift-2.22.0/drift_worker.js

      - name: Compress web archive
        run: |
          cd build
          tar -czf web_build.tar.gz web

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-web
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/web_build.tar.gz

      - name: Delete Android keys
        if: always()  # Ensure this runs regardless of job success or failure
        run: |
          rm -f android/app/keystore.jks
          rm -f android/key.properties

  docker-build:
    needs:
      - create-release

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Download web archive
        uses: actions/download-artifact@v4
        with:
          name: android-web
          path: build

      - name: Extract web archive
        run: |
          cd build
          tar -xzf web_build.tar.gz

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{env.IMAGE_NAME}}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build_assets/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Remove untagged images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          delete-untagged: true
          token: ${{ secrets.GITHUB_TOKEN }}
          package: flavormate-webapp

  create-release:
    needs:
      - build-android-web
      - build-ios-macos

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download web archive
        uses: actions/download-artifact@v4
        with:
          name: android-web
          path: build

      - name: Download web archive
        uses: actions/download-artifact@v4
        with:
          name: ios-macos
          path: build

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios/ipa/Runner.ipa,build/macos/Build/Products/Release/FlavorMate.pkg,build/web_build.tar.gz"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          removeArtifacts: true
          replacesArtifacts: true


